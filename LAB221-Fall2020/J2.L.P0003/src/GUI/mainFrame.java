/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DTO.Employees;
import Validation.checkValue;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author truon
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    ArrayList<Employees> listEmp = new ArrayList<>();
    int index = -1;
    boolean createNew = false;
   // boolean findByID = false;

    public mainFrame() {
        initComponents();
       // this.setTitle("Dddd");
    }

    boolean checkUpdateStatus() {

        try {
            if (index >= 0) {
                String empID = txtEmpID.getText().trim();
                String fullName = txtFullname.getText().trim();
                String phone = txtPhone.getText().trim();
                String email = txtEmail.getText().trim();
                String address = txtAddress.getText().trim();
                String DOB = txtDOB.getText();
                for (Employees employees : listEmp) {
                    if (empID.equals(employees.getEmpID())) {
                        if (!fullName.equals(employees.getFullName())
                                || !phone.equals(employees.getPhone()) || !email.equals(employees.getEmail())
                                || !address.equals(employees.getAddress()) || !format.parse(DOB).equals(employees.getDateOfBirth())) {
                            return false;
                        }
                    }
                }
            }
        } catch (Exception e) {
        }
        return true;
    }

    int checkIDTR(String empID) {
        int checkID = -1;
        for (int i = 0; i < listEmp.size(); i++) {
            if (empID.equals(listEmp.get(i).getEmpID())) {
                checkID = i;
            }
        }
        return checkID;
    }

    void whenCreate() {
        txtEmpID.setText("");
        txtFullname.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtDOB.setText("");
        txtEmpID.setEnabled(true);
        txtFullname.setEnabled(true);
        txtPhone.setEnabled(true);
        txtEmail.setEnabled(true);
        txtAddress.setEnabled(true);
        txtDOB.setEnabled(true);
        btnCreateEmp.setEnabled(true);
        btnFIndByEmpID.setEnabled(false);
        btnGetAllEmp.setEnabled(false);
        btnRemoveEmp.setEnabled(false);
        btnUpdateEmp.setEnabled(false);
        tblEmp.setEnabled(false);
        tblEmp.clearSelection();
        
    }

    void whenClick() {

        txtEmpID.setEnabled(false);
        txtFullname.setEnabled(true);
        txtPhone.setEnabled(true);
        txtEmail.setEnabled(true);
        txtAddress.setEnabled(true);
        txtDOB.setEnabled(true);
        btnCreateEmp.setEnabled(true);
        btnFIndByEmpID.setEnabled(true);
        btnGetAllEmp.setEnabled(true);
        btnRemoveEmp.setEnabled(true);
        btnUpdateEmp.setEnabled(true);
        tblEmp.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFullname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        btnCreateEmp = new javax.swing.JButton();
        btnUpdateEmp = new javax.swing.JButton();
        btnRemoveEmp = new javax.swing.JButton();
        btnFIndByEmpID = new javax.swing.JButton();
        btnGetAllEmp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmpID", "Fullname", "Phone", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEmp.getTableHeader().setReorderingAllowed(false);
        tblEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblEmpMouseReleased(evt);
            }
        });
        tblEmp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblEmpKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmp);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Emp Management");

        jLabel2.setText("Emp's Detail:");

        jLabel3.setText("EmpID:");

        jLabel4.setText("Fullname ");

        txtFullname.setEnabled(false);

        jLabel5.setText("Phone:");

        txtPhone.setEnabled(false);

        jLabel6.setText("Email:");

        txtEmail.setEnabled(false);

        jLabel7.setText("Address:");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.setEnabled(false);
        jScrollPane2.setViewportView(txtAddress);

        jLabel8.setText("DOB");

        txtDOB.setEnabled(false);

        btnCreateEmp.setText("Create Emp");
        btnCreateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEmpActionPerformed(evt);
            }
        });

        btnUpdateEmp.setText("Update Emp");
        btnUpdateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmpActionPerformed(evt);
            }
        });

        btnRemoveEmp.setText("Remove Emp");
        btnRemoveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEmpActionPerformed(evt);
            }
        });

        btnFIndByEmpID.setText("Find By EmpID");
        btnFIndByEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFIndByEmpIDActionPerformed(evt);
            }
        });

        btnGetAllEmp.setText("Get All Emp");
        btnGetAllEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCreateEmp)
                                        .addGap(82, 82, 82)
                                        .addComponent(btnUpdateEmp)
                                        .addGap(74, 74, 74)
                                        .addComponent(btnRemoveEmp))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(45, 45, 45)
                                                .addComponent(txtDOB))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(26, 26, 26)
                                                .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(27, 27, 27)
                                        .addComponent(btnFIndByEmpID))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(btnGetAllEmp)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFIndByEmpID))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGetAllEmp)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateEmp)
                    .addComponent(btnUpdateEmp)
                    .addComponent(btnRemoveEmp))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetAllEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllEmpActionPerformed
        // TODO add your handling code here:
        if (!checkUpdateStatus()) {
            JOptionPane.showMessageDialog(null, "don't finish UPDATE");
            return;
        } else {
            index = -1;
            tblEmp.clearSelection();
            DefaultTableModel model = (DefaultTableModel) tblEmp.getModel();
            model.getDataVector().removeAllElements();
            for (Employees employees : listEmp) {
                Vector row = new Vector();
                row.add(employees.getEmpID());
                row.add(employees.getFullName());
                row.add(employees.getPhone());
                row.add(employees.getEmail());
                model.addRow(row);
            }
            txtEmpID.setText("");
            txtFullname.setText("");
            txtPhone.setText("");
            txtEmail.setText("");
            txtAddress.setText("");
            txtDOB.setText("");

            txtEmpID.setEnabled(true);
            txtFullname.setEnabled(false);
            txtPhone.setEnabled(false);
            txtEmail.setEnabled(false);
            txtAddress.setEnabled(false);
            txtDOB.setEnabled(false);

            btnCreateEmp.setEnabled(true);
            btnFIndByEmpID.setEnabled(true);
            btnGetAllEmp.setEnabled(true);
            btnRemoveEmp.setEnabled(true);
            btnUpdateEmp.setEnabled(true);
            tblEmp.setEnabled(true);
            tblEmp.updateUI();

        }
    }//GEN-LAST:event_btnGetAllEmpActionPerformed

    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseClicked
        // TODO add your handling code here:
//        JOptionPane.showMessageDialog(null, !checkUpdateStatus());
//        JOptionPane.showMessageDialog(null, !createNew);
        if (!checkUpdateStatus() && !createNew) {
            JOptionPane.showMessageDialog(null, "don't finish UPDATE");
            return;
        } else {
            index = tblEmp.getSelectedRow();
            if (index >= 0) {
                whenClick();
                try {

                    txtEmpID.setText(listEmp.get(index).getEmpID());
                    txtFullname.setText(listEmp.get(index).getFullName());
                    txtPhone.setText(listEmp.get(index).getPhone());
                    txtEmail.setText(listEmp.get(index).getEmail());
                    txtAddress.setText(listEmp.get(index).getAddress());
                    txtDOB.setText(format.format(listEmp.get(index).getDateOfBirth()));

//                    findByID = false;
//                    btnFIndByEmpID.setText("Find By ArmorID");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_tblEmpMouseClicked

    private void btnFIndByEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFIndByEmpIDActionPerformed
        // TODO add your handling code here:
       // JOptionPane.showMessageDialog(null, index);
        if (!checkUpdateStatus()) {
            JOptionPane.showMessageDialog(null, "don't finish UPDATE");
            return;
        } else if (tblEmp.getSelectedRow()==-1) {
            try {
                String empIID = txtEmpID.getText();
                if (checkValue.checkEmpId(empIID)) {
                    int checkID = checkIDTR(empIID);
                    if (empIID.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "have not entered id");
                    } else if (checkID == -1) {
                        JOptionPane.showMessageDialog(null, "id does not exist");
                        txtEmpID.setText("");
                        txtEmpID.requestFocus();
                    } else {
                        txtEmpID.setText(listEmp.get(checkID).getEmpID());
                        txtFullname.setText(listEmp.get(checkID).getFullName());
                        txtPhone.setText(listEmp.get(checkID).getPhone());
                        txtEmail.setText(listEmp.get(checkID).getEmail());
                        txtAddress.setText(listEmp.get(checkID).getAddress());
                        txtDOB.setText(format.format(listEmp.get(checkID).getDateOfBirth()));
                        tblEmp.setRowSelectionInterval(checkID, checkID);
                        index=tblEmp.getSelectedRow();
                        txtEmpID.setEnabled(false);
                        txtFullname.setEnabled(true);
                        txtPhone.setEnabled(true);
                        txtEmail.setEnabled(true);
                        txtAddress.setEnabled(true);
                        txtDOB.setEnabled(true);
                        //findByID = true;
                        txtEmpID.setEnabled(false);
                        //btnFIndByEmpID.setText("Clean detail");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EmpID: max length is 10 and not contains special characters (@, #, $)");
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }

        } else if (tblEmp.getSelectedRow()>=0 &&checkUpdateStatus()) {
            //findByID = false;
            txtEmpID.setEnabled(true);
            btnGetAllEmpActionPerformed(null);
        }
    }//GEN-LAST:event_btnFIndByEmpIDActionPerformed

    private void btnCreateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEmpActionPerformed
        // TODO add your handling code here:
        if (!checkUpdateStatus() && createNew == false) {
            JOptionPane.showMessageDialog(null, " don't finish UPDATE");
            index = tblEmp.getSelectedRow();
            return;
        } else {
            if (createNew == false) {
                createNew = true;
                whenCreate();
                btnCreateEmp.setText("Save");

            } else if (createNew) {
                int ans = JOptionPane.showConfirmDialog(null, "Do you want to SAVE?", "SAVE", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    try {
                        String empID = txtEmpID.getText().trim();
                        String fullName = txtFullname.getText().trim();
                        String phone = txtPhone.getText().trim();
                        String email = txtEmail.getText().trim();
                        String address = txtAddress.getText().trim();
                        String DOB = txtDOB.getText();
                        boolean check = checkValue.checkEmpId(empID) && checkValue.checkFullName(fullName)
                                && checkValue.checkPhone(phone) && checkValue.checkEmail(email)
                                && checkValue.checkAddress(address) && address.matches(".{0,30}")
                                && checkValue.checkDateOfBirth(DOB);
                        if (empID.isEmpty() || fullName.isEmpty() || phone.isEmpty() || email.isEmpty() || address.isEmpty() || DOB.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "have not entered enough information");
                            return;
                        } else if (!check) {
                            if (!checkValue.checkEmpId(empID)) {
                                JOptionPane.showMessageDialog(null, "EmpID: max length is 10 and not contains special characters (@, #, $)");
                                txtEmpID.setText("");
                                txtEmpID.requestFocus();
                            } else if (!checkValue.checkFullName(fullName)) {
                                JOptionPane.showMessageDialog(null, "FullName: max length is 30");
                                txtFullname.setText("");
                                txtFullname.requestFocus();
                            } else if (!checkValue.checkPhone(phone)) {
                                JOptionPane.showMessageDialog(null, "Phone: max length 15, contain numeric characters only (0 – 9)");
                                txtPhone.setText("");
                                txtPhone.requestFocus();
                            } else if (!checkValue.checkEmail(email)) {
                                JOptionPane.showMessageDialog(null, "Email: max length is 30, contain only one “@” character, do not contain special characters (!, #, $)");
                                txtEmail.setText("");
                                txtEmail.requestFocus();
                            } else if (!checkValue.checkAddress(address)) {
                                JOptionPane.showMessageDialog(null, "Address: max length is 300");
                                txtAddress.setText("");
                                txtAddress.requestFocus();
                            } else if (!address.matches(".{0,30}")) {
                                JOptionPane.showMessageDialog(null, "please leave enter");
                                txtAddress.setText("");
                                txtAddress.requestFocus();
                            } else if (!checkValue.checkDateOfBirth(DOB)) {
                                JOptionPane.showMessageDialog(null, "wrong date");
                                txtDOB.setText("");
                                txtDOB.requestFocus();
                            }
                            return;
                        } else if (checkIDTR(empID) != -1) {
                            JOptionPane.showMessageDialog(null, "id already exists");
                        } else {
                            Employees emp = new Employees(empID, fullName, phone, email, address, format.parse(DOB));
                            listEmp.add(emp);
                            JOptionPane.showMessageDialog(null, "created successfully");

                            btnCreateEmp.setText("Create Emp");
                            createNew = false;
                            btnGetAllEmpActionPerformed(null);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (ans == JOptionPane.NO_OPTION) {
                    btnCreateEmp.setText("Create Emp");
                    createNew = false;
                    btnGetAllEmpActionPerformed(null);
                }
            }
        }
    }//GEN-LAST:event_btnCreateEmpActionPerformed

    private void btnUpdateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmpActionPerformed
        // TODO add your handling code here:
        index = tblEmp.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "have not selected a row to delete");
        } else {

            try {
                String empID = txtEmpID.getText().trim();
                String fullName = txtFullname.getText().trim();
                String phone = txtPhone.getText().trim();
                String email = txtEmail.getText().trim();
                String address = txtAddress.getText().trim();
                String DOB = txtDOB.getText();
                boolean check = checkValue.checkEmpId(empID) && checkValue.checkFullName(fullName)
                        && checkValue.checkPhone(phone) && checkValue.checkEmail(email)
                        && checkValue.checkAddress(address) && address.matches(".{0,30}")
                        && checkValue.checkDateOfBirth(DOB);
                if (empID.isEmpty() || fullName.isEmpty() || phone.isEmpty() || email.isEmpty() || address.isEmpty() || DOB.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "have not entered enough information");
                    return;
                } else if (!check) {
                    if (!checkValue.checkEmpId(empID)) {
                        JOptionPane.showMessageDialog(null, "EmpID: max length is 10 and not contains special characters (@, #, $)");
                        txtEmpID.setText("");
                        txtEmpID.requestFocus();
                    } else if (!checkValue.checkFullName(fullName)) {
                        JOptionPane.showMessageDialog(null, "FullName: max length is 30");
                        txtFullname.setText("");
                        txtFullname.requestFocus();
                    } else if (!checkValue.checkPhone(phone)) {
                        JOptionPane.showMessageDialog(null, "Phone: max length is 15, contain numeric characters only (0 – 9)");
                        txtPhone.setText("");
                        txtPhone.requestFocus();
                    } else if (!checkValue.checkEmail(email)) {
                        JOptionPane.showMessageDialog(null, "Email: max length is 30, contain only one “@” character, do not contain special characters (!, #, $)");
                        txtEmail.setText("");
                        txtEmail.requestFocus();
                    } else if (!checkValue.checkAddress(address)) {
                        JOptionPane.showMessageDialog(null, "Address: max length is 300");
                        txtAddress.setText("");
                        txtAddress.requestFocus();
                    } else if (!address.matches(".{0,30}")) {
                        JOptionPane.showMessageDialog(null, "please leave enter");
                        txtAddress.setText("");
                        txtAddress.requestFocus();
                    } else if (!checkValue.checkDateOfBirth(DOB)) {
                        JOptionPane.showMessageDialog(null, "wrong date");
                        txtDOB.setText("");
                        txtDOB.requestFocus();
                    }
                    return;
                } else {
                    for (Employees employees : listEmp) {
                        if (empID.equals(employees.getEmpID())) {
                            employees.setFullName(fullName);
                            employees.setPhone(phone);
                            employees.setEmail(email);
                            employees.setAddress(address);
                            employees.setDateOfBirth(format.parse(DOB));
                        }
                    }
                    JOptionPane.showMessageDialog(null, "update successfully");
                    btnGetAllEmpActionPerformed(null);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnUpdateEmpActionPerformed

    private void btnRemoveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEmpActionPerformed
        // TODO add your handling code here:
        int indexDel = tblEmp.getSelectedRow();
        if (indexDel < 0) {
            JOptionPane.showMessageDialog(null, "have not selected a row to delete");
        } else if (!checkUpdateStatus()) {
            JOptionPane.showMessageDialog(null, " don't finish UPDATE");
            return;
        } else {
            try {
                String idGet = txtEmpID.getText();
                int ans = JOptionPane.showConfirmDialog(null, "Do you want to REMOVE?", "REMOVE ARMOR", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    if (checkIDTR(idGet) != -1) {
                        listEmp.remove(checkIDTR(idGet));
                        JOptionPane.showMessageDialog(null, "deleted successfully");
                        btnGetAllEmpActionPerformed(null);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnRemoveEmpActionPerformed

    private void tblEmpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseReleased
        // TODO add your handling code here:
        int iindexx = tblEmp.getSelectedRow();
        if (iindexx >= 0) {
            tblEmp.setRowSelectionInterval(iindexx, iindexx);
            tblEmpMouseClicked(null);
        }
    }//GEN-LAST:event_tblEmpMouseReleased

    private void tblEmpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblEmpKeyReleased
        // TODO add your handling code here:
        int iindexx = tblEmp.getSelectedRow();
        if (iindexx >= 0) {
            tblEmp.setRowSelectionInterval(iindexx, iindexx);
            tblEmpMouseClicked(null);
        }
    }//GEN-LAST:event_tblEmpKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (!checkUpdateStatus() || createNew) {
            JOptionPane.showMessageDialog(null, "Please complete the function before closing the program");
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateEmp;
    private javax.swing.JButton btnFIndByEmpID;
    private javax.swing.JButton btnGetAllEmp;
    private javax.swing.JButton btnRemoveEmp;
    private javax.swing.JButton btnUpdateEmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEmp;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
